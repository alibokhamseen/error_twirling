""" Import for Creating Commutator and Generator Table for Given Matrices A & B"""
import numpy as np

class CommutatorGeneratorTables:
    """"Create Commutator and Generator Tables for Given Matrices A & B"""
    def __init__(self, A = None, B = None, size = 3):
        self.A = A if A is not None else np.random.rand(3, 3)
        self.B = B if B is not None else np.random.rand(3, 3)
        self.size = size
        self.commutator_table = None
        self.generator_table = None

    def zeta(self, g_i, g_j):
        commutator = g_i * g_j - g_j * g_i  
        anticommutator = g_i * g_j + g_j * g_i  
        
        if commutator == 0:
            return 1 
        elif anticommutator == 0:
            return -1 
        else:
            return 0  

    def create_commutator_table(self):
        self.commutator_table = np.zeros((self.A.shape[0], self.B.shape[1]), dtype=int)

        for i in range(self.A.shape[0]):
            for j in range(self.B.shape[1]):
                try:
                    self.commutator_table[i, j] = self.zeta(self.A[i, j], self.B[i, j])
                except ValueError:
                    self.commutator_table[i, j] = 0  

        return self.commutator_table

    def generator_zeta(self, i, j):
        return 1 - 2 * (i == j)

    def create_generator_table(self):
        self.generator_table = np.zeros((self.size, self.size), dtype=int)

        for i in range(self.size):
            for j in range(self.size):
                self.generator_table[i, j] = self.generator_zeta(i, j)

        return self.generator_table